{"version":3,"sources":["components/Clock.tsx","App.tsx","index.tsx"],"names":["Clock","steps","hours","minutes","seconds","initialTime","showSeconds","twelveFormat","timeArray","split","useState","Number","isNaN","time","setTime","onInputChange","e","newTime","target","value","name","isInteger","prev","onAdd","curField","currentTarget","textContent","className","onClick","data-testid","type","onChange","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5d3ca3f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\ninterface ITime {\r\n  [key: string]: number,\r\n  hours: number,\r\n  minutes: number,\r\n  seconds: number,\r\n}\r\n\r\n// props компонента\r\ntype ClockProps = {\r\n  steps?: ITime\r\n  initialTime?: string,\r\n  showSeconds?: boolean,\r\n  twelveFormat?: boolean\r\n}\r\n\r\n// default значения\r\nconst Clock: React.FC<ClockProps> = ({\r\n  steps = {\r\n    hours: 1,\r\n    minutes: 1,\r\n    seconds: 5\r\n  }, initialTime = '0:0:0', showSeconds = true, twelveFormat = false\r\n}: ClockProps) => {\r\n  // проверяем, что начальное время корректно\r\n  const timeArray: string[] = initialTime.split(':')\r\n  const [time, setTime] = useState<ITime>({\r\n    hours: (Number.isNaN(+timeArray[0]) || (+timeArray[0] < 0) || (+timeArray[0] >= 24)) ? 0 : +timeArray[0],\r\n    minutes: (Number.isNaN(+timeArray[1]) || (+timeArray[1] < 0) || (+timeArray[1] >= 60)) ? 0 : +timeArray[1],\r\n    seconds: (Number.isNaN(+timeArray[2]) || (+timeArray[2] < 0) || (+timeArray[2] >= 60)) ? 0 : +timeArray[2]\r\n  })\r\n  const onInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void = (e) => {\r\n    const newTime: number = +e.target.value\r\n    const { name, value }: { name: string; value: string } = e.target\r\n    // проверяем, что вписываемые данные корректны\r\n    if (!Number.isNaN(newTime)) {\r\n      if (!Number.isInteger(newTime)) {\r\n        return\r\n      }\r\n      if (name === 'hours' && (newTime < 0 || newTime >= 24)) {\r\n        return\r\n      }\r\n      if ((name === 'minutes' || name === 'seconds') && (newTime < 0 || newTime >= 60)) {\r\n        return\r\n      }\r\n      setTime((prev) => ({\r\n        ...prev,\r\n        [name]: +value\r\n      }))\r\n    }\r\n  }\r\n\r\n  const onAdd: (e: React.MouseEvent<HTMLButtonElement>) => void = (e) => {\r\n    let newTime: number\r\n    const curField: string = e.currentTarget.name\r\n    // обрабатываем часы\r\n    if (curField === 'hours') {\r\n      newTime = time.hours\r\n      if (e.currentTarget.textContent === '+') {\r\n        newTime += steps.hours\r\n        if (newTime > 23) {\r\n          newTime -= 24\r\n        }\r\n      } else {\r\n        newTime -= steps.hours\r\n        if (newTime < 0) {\r\n          newTime += 24\r\n        }\r\n      }\r\n    // обрабатываем минуты или секунды\r\n    } else {\r\n      newTime = time[curField]\r\n      if (e.currentTarget.textContent === '+') {\r\n        newTime += steps[curField]\r\n        if (newTime > 59) {\r\n          newTime -= 60\r\n        }\r\n      } else {\r\n        newTime -= steps[curField]\r\n        if (newTime < 0) {\r\n          newTime += 60\r\n        }\r\n      }\r\n    }\r\n    setTime((prev) => ({\r\n      ...prev,\r\n      [curField]: newTime\r\n    }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"column\">\r\n        <button name=\"hours\" onClick={onAdd} data-testid=\"add-hours\">+</button>\r\n        <input\r\n          type=\"text\"\r\n          name=\"hours\"\r\n          value={(twelveFormat && time.hours > 12) ? time.hours - 12 : time.hours}\r\n          onChange={onInputChange}\r\n          data-testid=\"hours-field\"/>\r\n        <button name=\"hours\" onClick={onAdd} data-testid=\"subtract-hours\">&ndash;</button>\r\n      </div>\r\n      <div className=\"column\">\r\n      <button name=\"minutes\" onClick={onAdd} data-testid=\"add-minutes\">+</button>\r\n        <input\r\n          type=\"text\"\r\n          name=\"minutes\"\r\n          value={time.minutes}\r\n          onChange={onInputChange}\r\n          data-testid=\"minutes-field\"/>\r\n        <button name=\"minutes\" onClick={onAdd} data-testid=\"subtract-minutes\">&ndash;</button>\r\n      </div>\r\n      { showSeconds && <div className=\"column\">\r\n      <button name=\"seconds\" onClick={onAdd} data-testid=\"add-seconds\">+</button>\r\n        <input\r\n          type=\"text\"\r\n          name=\"seconds\"\r\n          value={time.seconds}\r\n          onChange={onInputChange}\r\n          data-testid=\"seconds-field\"/>\r\n        <button name=\"seconds\" onClick={onAdd} data-testid=\"subtract-seconds\">&ndash;</button>\r\n      </div> }\r\n      {twelveFormat && (time.hours > 12 ? <h2 data-testid=\"time-format\">PM</h2> : <h2 data-testid=\"time-format\">AM</h2>)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Clock\r\n","import React from 'react'\nimport Clock from './components/Clock'\nimport './App.css'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"clocks-container\">\n      <Clock\n        twelveFormat={true}\n        showSeconds={false}\n        steps={{\n          hours: 2,\n          minutes: 3,\n          seconds: 1\n        }}\n      />\n      <Clock\n        steps={{\n          hours: 1,\n          minutes: 1,\n          seconds: 5\n        }}\n        initialTime=\"22:16:45\" />\n      <Clock\n        twelveFormat={true}\n        steps={{\n          hours: 1,\n          minutes: 4,\n          seconds: 15\n        }}\n        initialTime=\"18:28:15\" />\n      <Clock\n        steps={{\n          hours: 2,\n          minutes: 5,\n          seconds: 10\n        }}\n        initialTime=\"6:10:00\" />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}